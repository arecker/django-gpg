# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.test import SimpleTestCase

from . import fields
from . import gpg


VALID_KEY = '''
-----BEGIN PGP PUBLIC KEY BLOCK-----

mQINBFe103wBEACdl170uu6o8Q5dZOB8EwXLBowIvFH5diB/U3dG6kbsTTKofwo2
YV0gXCHbADr1XEPuoWIIcxEBf8o3PxitnJzKNhOp+t8XTEWbv974RUZTtUgLZhLv
kQCQUMoK3oH2Xhs9GiG9xWFKC7NTpTPtlZnD5Ng9W5l5xVpaCYGtUjH8EerpI4G5
6nOkjFPa5wcHV/Es0B5TxHRVxpetD7kq2jByE0wkVul4SAL5aUB2gCtwrlkg7VmS
V96dAVk3Eusqil/S3QK13F48/V4MCqCdqfcBkJJnqH2q15uGaIYqA/xUEdgW0v+A
lLuZbuEuuYRD2Lr6XgfjcBK0lgo7v+uOei5oiKNZDCrUWl2Vp4gJTcD6GTwyzzdj
idC7Py3wlKfZFaWn6XTBsm0df7F1iHVwq7dRJfBsPkgv/jEwsPGAN6MyhKGYqf5s
St+dvuchbSeQ8dryKVQ1dlIMLhIcriSGdE3r5ByBISS2fJSTKlgxGkuk7jz38rJ2
SdAuDwNtlXxTKkKyfJk1NJ7i7gVgjzYPumXrSc8+C17+yYuYt+Uvncsav0EwVYrE
SV+uhq82VYauiZWuHNKzslfRf8iDhKg82Vhw10rsqETuDQVrOiQuBOGajdwVl/YB
Wb0r2iUKKAleUfOnSrjL0n+yNtH6+60tL+Jts/MP3WnXzrpA6aLLnu8q6QARAQAB
tDJBbGV4IFJlY2tlciAoUGVyc29uYWwgS2V5KSA8YWxleEByZWNrZXJmYW1pbHku
Y29tPokCOQQTAQgAIwUCV7XTfAIbAwcLCQgHAwIBBhUIAgkKCwQWAgMBAh4BAheA
AAoJELMfzigb9J9LN+YP/0X99JPxHV+/24f0N7r5Bjtk6xaA8g3wc7VYyf0RVaRg
z2ra5vt4YTKd2qQW2qQVbU/4ZX4kWf6xiDQ5L/TqLKjSQbVCAiso/8q/VUi0elOp
7Cm9DSkT7iXWSLLsr9GnNhoVqhayflD2avDVnW9PaMNC969ySOaOqdsfu5E7UuiB
v5qR8hlriv/OkHWJyj+sckLzZtOU4vtJN61nOSo8P5J+ZvLtYGz3HWsA/EoiYbml
6yiiVtK3DpYgFOPdsahD2uy3gmOvuzNB1edtueceAb7rsfE0EM2uq6Q2zkXr+1SQ
XPQm5UOeSgBNAqDmfp8/kBXPLIulJMvsYda4jXA8DRBiLZirvUpjgG41th28cKL9
LS3HxsYmy9cnR+ssJbxTpw9vhUSuTv3Xv01KLiqtPuyWXi025VdMfN9h9k6k/C+N
WM/gn0Vic5612Krj18i7A1l4XOStSE+vgOTkia1pueXNrjO3DsAdLjR4hxKtY34t
R6q6+k7kpjOWChOvBpI9swEPhur3JzRHOad/VpzqUKlg5I7RkhmnvJLqjDpwOqu6
+RyVu+KVz1Ha8Ne5fXDsjXRIbCffYjX3J15Y7j5jrqsYIwJ+XVGSjb7UJ2ILTsz8
03ihs4RtZfdvH9ldfIQwPz8f+M9DSRr7W1lc4S0qUnQsxEh0Ziyl1dMRq/tpUtFa
0dbe1twBEAABAQAAAAAAAAAAAAAAAP/Y/+AAEEpGSUYAAQEBAEgASAAA/9sAQwAD
AgIDAgIDAwMDBAMDBAUIBQUEBAUKBwcGCAwKDAwLCgsLDQ4SEA0OEQ4LCxAWEBET
FBUVFQwPFxgWFBgSFBUU/9sAQwEDBAQFBAUJBQUJFA0LDRQUFBQUFBQUFBQUFBQU
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQU/8IAEQgAeAB4AwER
AAIRAQMRAf/EABwAAAIDAQEBAQAAAAAAAAAAAAQFAwYHAggBAP/EABoBAAIDAQEA
AAAAAAAAAAAAAAECAwQFAAb/2gAMAwEAAhADEAAAAcrSNorsFJgJHHhHlx9lIxU6
mTBboAMoDKEVGPQhtFhndRyNQXIYjiro3tAobDEnCZ6wG35pY8S1kXNGH3QcdMrW
7CkrYFzzMAa9Xsm520snjyWerbdDEUSwKXiWsgRAoOl1rlljlc8zwFoD9jmGyfRK
D1IdM62fLOpoB5YFTRg8BeOjVrdkjlsayOeZspkDrszXoy2aDPVzvX87bOB01da8
IRAYOg1rb5ZbAkjjmcI80M0FS/BT1cduZ1hsZ8U8FSvZyWaqCQIpu0FlwHfpI2WS
40r7RJux1SDQFHhMY6kTVcf2cAIgUG1xTMQzRWarLe8vYSzwj9wZWQGXjypIgm8/
bnnCJYRQbKjng7FS0ElfSMgceWIg9H3QdyoisDtKgseedjAktU4BzxGeRz+kfPex
ptrNpSsxtVF1isrBY2KMle8tpX75FLgupjL7udFwcqWqS+k/M+3qNihjbgfd8hq0
1BesjC5iVOvp02rsbN532mEauCDo5Hzgz4T8rqC7DVvpRxjV9k0/NtOKqfPy/J9W
TW0tCpaldkgyTe8xx3MOE3LMVm5v3G95G5ouh5yjQ31lilxmehkitkLKyhmwv0Xk
vpU7hKVl4S8eyLXn6r5TDFY4SVSQGyiiS80tDC/Q+SkKllZSJO6UjsDc8P0gJ5Qw
gHEiR1FJh1/P1bK2sM9F5Ptk/8QAKhAAAQUAAgIBAgYDAQAAAAAAAgABAwQFBhET
IRIUIgcVFiQxMiMlNEL/2gAIAQEAAQUCjD7wDtBEmhXgRQ9IfFGFuaQn8rSSHGjB
GKJk7J2UA/I4wUUajgXiVoep6WNUJWqcMbcgg8Ngg7UoIhUje3ZOq3o4gUQewF3Y
YlvxPHUrcpir1dDl95oNe9c0BD/JBMKNlIiTqv8A2rqH28Q+gHtpYWkCtkwi2pfr
VMrUJmzKmk7Lz+RGyNEydQKsXTQ/zGKjFH6TzeKWzLrEWr9RVyYX6OJ/X/k2RIlC
SgJQn0o5vcUvr2726/ljK2TR7Bvo6NbitdxtcUYFaqzU0aJEonUJKGTpRyMqsbNC
wpxZanHq+i+bxyrlomTrkkTSVTRIkBKMlFL0oplasSQxfmczsWi6fQjdxvGvrrie
/oM9xvPQhldEnQkgJcX43WuVNGjHR1NcWlGHi1Y4/wBJ1F+lKSPh8DqXh5MpsUqZ
h99e0Hhv99s6F1mkTXYWk8m+1e8e/Z+FippjNUtaEldfnZOnuWhb6xaNz9vT/wCf
fEQ2h/q6Z1RsNXtV4erHItKOseprSWQ47Y+a0OM169anxw69yxyGxQIGmt2983GH
HaLa47t5z5uiD+nTOhdRadqKPzfJX/YZMXjrUdWfQk0rUWFoa8La2jKViA7OX3n8
BcJcT8Q6oiTfwmdM6Z0zp/ubjoxnT49mlQj5ZP5tMNGQqmfSk0LejfrwWPw6s/tu
fdFnA/2pkzpnXa7VKp5aVXZuZdqPlzKTlwO03I7hRVKRFX4jN9DyLnb/AOsjf12m
dM6Z12u1nhG+ZLmFEpKNt09G0qWfJJLL8fl53r8i5t92XG/pf//EACoRAAEDAwME
AgEFAQAAAAAAAAEAAgMEERIQICEiMUFRBRMzFSMwMlJh/9oACAEDAQE/ARssmMzd
ZMga0WsnwXHZTwYalX0uhtphco3CYSe6qgLaHaNsDsXLLIXT3GMqfJ7b9k4WKKOw
IbIji8FeLJzfJUrh9acbm6cNoQ20z8m2KdmTwqolsWjkdgQQ0FygwqDFh5TbKocC
cV9bfKdT37KWNzO6OwFAq6jbYa3KtrUMyYjrfQFAo3HZXeru9rn2uv2rvWb/AEjy
E9vOy6jgJbdCkifjgbFEeFg0LFvtYM9rAL60I7edJR1HZBf7G2UjS4YtCe10bgsS
pj40xtzdNqoT2emOvzdB1xpUDrR1idi8FPIIvdS8W4spJ+lV1VNCOgr9VfEwOf1J
/wAvHLCQ0cqFrnC/YI1zomCOIqkmkkZd5UPXGCqyL63o69lHVzRizXKKvvxMpaiN
3DE6ljqGdanoRSs5VFSsIcT4UVU6GS6jp6apaJA3um0zGRkBUZvCF8g28Yd/BSuv
GvkpMpsfS+Oi/bLj5Unx7W1QJHSVT07IOlgRcBwqB3SQq38Kdvp/6cqaEPjc0Duo
bQxhi+z/AIi9yaCeVSHGYtVb+BO3xABgC+v/ACsHrB/tBtu+gOE91WfhKcNP/8QA
JhEAAgEDAwQCAwEAAAAAAAAAAQIAAxESBCAhEBMxUSJBFDIzMP/aAAgBAgEBPwE7
XfBbx6zubxHI+5Sq5ed526k8QLCJSO87ayZCYlTaKgaUgqmAwbTtb5LaGKZTJLQC
0B2mHbXTE8RFp48yiAanHjoINtup4hf1Kt2g44lK4+UzMWtbzEYN43Ho7XPXxD0v
KLYvutCItieZZZZfU49Sy+pikwT3AeYp2vWs2Ig1DWN4DbmZk/UyaZN6mZncncvx
0p/qNlX9DFNjeI17xTKcJIgaYOPqOJjbpRPxg61FyUiDjiLzEpWPEo01Y8z8UMbD
iDSMr8x7CdnI5NKqKrcSr8KhtNM+awbGoU35Ij6X7SJSdeTO81N+JT1HdbiVqp4E
anmsapVpHEmd4s81ItUM0bWcj/DUCz3mlFkvNQ/ytF1BNI+xKlRn5YwD7mrHIM0v
9YN9b9ojWYGVBmxa8wgQRrTUjKkGml/pBvqE5kwVPcyWZrC1/HS2VG00v9IOn//E
ADwQAAEDAQUFBAUKBwAAAAAAAAEAAgMRBBITITEgIkFRYTJCcYEFIzBSkRAzNHKh
orHR4fAkNUNigpLx/9oACAEBAAY/AtrOjq9ELkNR9VYZbcdyPs9FZ4jpIVnGHeKI
Y0fBYmQdwXj7Nsw/puB8kH3TXk5SyRWOPCbQOmqTSumSL5g5hGYqKJjuba7R2Sx2
YKa8BoIFHclPBKxzpJd7Jna5JhvYl9uYkGYV2uXBZ7J2sI9l+itWFYWTta66HuJ5
ck3GqJpDm3kh7AbHao4ZtPVbuHi96OXKhTbPfxn1JcW6VVJmV68VWzyEf2uVyVtO
vDb1Tfigswg515jh3muRLAXP953yVKOWbc9nX5KIYUjIqauk0ot70nAPq0/JZ+l2
+VfyX83f99bnpaP/AD/ULdtNmm82oephPh/1SV1/RUOzj22/n2WjJRx/NwvdRshP
LggHEtjczVNJtThXwX0p32L6S74hblqd5hZWlvm1B7pWloPAJ/irQwcHnYguND33
xQO0Ka60WqOgdeDYRRMGty1NbTxoT+Kc1zi0fh4KMUFA0UrqF81eb7wcvmvvIF1i
lFeKBdepxAKJFBXRuqFTqKqe6Qa55bEMhqQ1wOSBZYYt8ZzVqrRCZw95obsYpdK9
dvdeKuSGra8VHLFa5ZMQXrjBoOqjkMjJImOBLXZOPSiLTJVztIaVKltdp3HP7rMq
LIkVcrMJRU3KJzO6dNm4y0SNZ7oct7M81kFjAkOvUorPY7LFgMaz19pPapyAXo+G
EVGIHzPdnUcv3yCmZJlQercBoUYXnMGmalxxvXTI2nRR11Y8hQzN509g+zBzWzOJ
uhwTzJTEcfsV2uUYp5rdJx2d7mF/ERyOB75yopIIxVt3CAHBWiCubX3v38F1Dh7B
r3HC3iGP4eaYbWzGi0LzmadCjfs9SSSaOWVnP+ycY2CJvvUqr7YqyV3pn9eQUsHB
xcz4LzHsIYy2rLgVYJ7te67MLsWd/Wn6Ktyzs60WJK7EaOyCMkxvcYb7isel0GW8
PBN+X//EACcQAQACAgEDAwUBAQEAAAAAAAEAESExQVFhcRCBsSCRocHh0fDx/9oA
CAEBAAE/IZFgWP0g3cpWmIroHTSYLPjC5aoouFXE7H1EC54amJzUSoYghlJL6RAu
OJQOxBXykpO0pDwLJUv0ChDf3hNTpI54JjmwR18qfmXPsgWr74hsyV18SL/SaEqr
+krZilY8StlcGYYY4ZEwIWPMrMzhsadpl9tgyMXrtLNa7RbGmCgPtDr1EMGcyixD
HhMUbWG79M1LEUEIhKqXGyUmyYO8RNIv7kJ6adOQ2BL3KvedspxGJVm78Sp9IlF9
IepUhuVS6mWXpuZTFGW9HlxK1UKGPcFTEr6Hrp4JmdmOI95cgjWU+8rezjaPPp2l
JKqzE7J1KM3KZMFVuNEwckRgihw10l063nZX0zEN6OCLxwD3/wDIrzuD0PUXEOKu
WpTeCEK1ManuiTp8/wAPKcQdz+kFLt612duz95mXsc+YHHl/F0Ti5eHc3hsKPddW
AK11iKbvpYouYjRdjuwJ2jYgVlf9zEksEGnZKklvUJlre8qYphY/ZkOcDvwf2m2z
mVM6/wAkHGiZg5TFFwAu0XzLpRrZroq5/EF4tnrFke6KSTu34IDM0egjy9v/AAQq
bvFfxBYHDr4g2hRAesXkUYBojNvvKn1jtdNRXG/pgGnRZQZ4j7n2hFNKqD5mHTHD
MPeJrWhtiOA30hbbOi54T+sTuPmXg0uEezAVaNYlCtHiM76lzmYI/uYRMb9oZh2J
+ko7/sITa2Xa2y1N8EGDUw/5GhZIClv95lsxbLWGz12wqNsUBm3iOb7oijPfQ1Tt
Oxafm/3CyBLPeIqx+lNJkjaELIYS+Bw2UmHqmmuWfio7pVADML/vf/gYME0vjGl/
MO1gR7lRkXYEvlYvUCsJNHT1m+Gee0f5bQe1JSyQXKtvE3BcWD9Rpf2bj3YEcmcz
a0nmWY/mCx8S4Z36VfoYk6y3W8Fjiax1qkI306kAaHo0/E7b7BvWpSZ8AFQLFE7y
Y7HWn0Cz/9oADAMBAAIAAwAAABBFZBe81UVF14vG3llTZkHdGbQnw2Azy9yw7HVt
oY3lXsKbUilDgNwy8qKqB6Uf30lAQk4k87XEGVNhFMwDV/0ll9380Os/tYEjJ5dh
U9Vq3Xu5jdm//8QAIhEBAQEAAgICAwADAAAAAAAAAQARITEQQVFhcYGxIJGh/9oA
CAEDAQE/EO9kEFrZw+cUGocqrUOJMnw1sOd2Y8xBvMHg1WQ8EsRT2THLhPkY8wZF
6iyT5g7uCCgcD3JwH8pWG7ynxs9ukRFuhCGJHi3H/ZnT1a/yvZJ8y2+ayPAR9XPH
JLJwP7Yd7bm4HizvqJYynxbHgJXKzQe0l3+p+O7YwRdshhl8SoeBvk8AMsP58+rY
B14y1H2Sxu+4C3D8SEe5MJ9xfTnjRHRYPniyh1H4slAkeDhkLZy/yE1+0ev1d6Z4
C+ZFeBtnTKtYm9WYfcmMWy4TeTiQ4dgH3I5xAkAeN5nDWCXw9gxyEOkiJpELLtHg
3/TA2nfUHTkIXCWo/wBnM4G1y4YnzMYFxZZod76gCceOxC3xaWdNzfDfS1xyx4b9
kH7reDXq5f1dD8PzCVuOD1tiPIrp6SDv+HHP3Hj+JgHrb5UGe8upnqPiMziHOoMG
wj1/bZe4fy1M7/phHCPiIfPGIv8AUMYsksLM8FNjjYcW+33+ZgzoksUbmXHDPu3j
3DV+rt/jkwk6yeerL7C5J3lvhS+9zyuaDO7/xAAgEQEBAQADAAMAAwEAAAAAAAAB
ABEQITFBUWEgcYGx/9oACAECAQE/EPFrLbbbF7Cya1c2D1wWdbHCb5Lq3jS2fBA+
2fZNp+Q6RAvUFnB6/j2J8SCu27te/qxRjt0F0juLLOL7wy5FSaexncz0sD/yQBfd
GMHDw9cMvxx3Y6bGVq2N8p804+I7s4TZ13JZM7MOQmMvaGuMgXRvjY/YHOSQJPi0
Rj8tIIlTeWN9MecMmSSXuwNhRj4NhT95TtUofM/BMi25/BNt5OouPT44Q7RD6Ip9
pdTMkDB7PU1SOCwbudQgm7Lwy072OLeAWnRJNXIaB3/U7dzm5MnZacFgnySVrqyn
vb3FnBC+uPuJaMtefMBR9sKIIPtH+pJzjzhjDs+6/wCcY9d56vwntuBzY8dx++Mh
EVj/AMXBJ5NvJJs+LyH9N1R8QsNK9hnf62X3SWCfX80OT68tUfPiX5xGfmC4uzHW
/wCX5hDrxXjb3lSPdk8O3X0Ni+MYwZfMlvxdDs94/8QAJBABAQACAgICAgIDAAAA
AAAAAREAITFBUWFxgZGhscEQ0fD/2gAIAQEAAT8QkWVDEAnvIgE4LjJAdGsszx2m
I/kNGNeYZoPu84c2M1AfJz+nAmzDRfOOrWSEcKdY58ZbXOSuTA2zfrK7bugwF4Dr
3l6pe8kA8YjVfqEAb9b/AIxlFBToB4MI7HEGnxh+k5AvL+uMEvYETAPPeFX2ZtHW
RX/FrBRm3o3kQFLzjQRpZM4yTnEhSuCOB+NiL/UP04i22vY0aGCurt1jhX2yLAmK
R3D2YXFpmcynKelwGIXEG1x951u5Mk1y4teLmlTjOXCPQ4Tn1z/vBQSJb14wm75e
8A7C93Boiu7XOBlrpgBEVvtxZihp3SABRUmdRi3nMg5QOZJkaRwLqODAgI32YS01
Mo6bzQ9fOVN5wOApp+Mknh3hKBcTFGUuxyAWfjIDhGkwRI0dVH/Z9uH4DJgSMPJX
b6wnITzdCnaUj94VNB2Osep2szvWBFwEwRbx1jqr9ZfbU85MJ54TFddTSOnFHVJy
SZESp2YNgJsUlMUggLYXQ9CfzgOOxwgBAsSdb1vAyK5xMpVYAbydADsUGnI5zoSC
2+uz8ONsJU348x/GufWMp6xVnrNoyr6xXFHi4SCgd84oBt0TjOctzmB6ybYQChpw
0itMUT4yNFGndEWIb04hJaj8E4wVXyUxeEqJgej4OYp+X7wSiexlFv6yRwQbzglk
GCNnkmI3sjZvC/E0BVGKC+t5B2K2I6TkfD8YvSD8nP8An5xEjrQB/Fx9i8YCoClQ
YZrgqfR7zZrnGylj7B8oYkkqLWnF4d7/AFihdsbgih/3RjgAlD0jMVxuEIPGdXGO
jXIIcF3fx84i9PE0Fd2hvjFzqjkU/MCYFGECOvtxTRaiB/ODgY+3+8BRmcLP04uz
OGB/DidXgVggPtmQt2a2ap/ZmlpgeBb/AHkh9YRU4qB3hDomoCgPF59YIjaabdZD
xoxpSLngJDTYo7B8YGlEVEJxWXnbfjvHzLCjQNbEdN3kqF0vD5ODj4hWUX4weHqA
seVQGWR7KaelNGSXfaRdKJpsTEtbYILt3NYSysOkUZ3i7OTFVkw39ZCkOwCoPWjN
uQEDBiDF3zrWCNASUpXs6b1i52YE/sJ6cEuYIQcw+MADWWwrtCAnebOlCSjQogM7
R4xtKTkC0AGG+cQYsSUBNFgvlvnAYjW2APOAVF7Iu0G+VrL9u8qneIOmLFTeT7wk
TkA08AOKV7VVT2ubkjt8Y4EJNid3sfvGNUEwDmAFD7NGKMWzJMWjRf4mY8bXQVKE
FGbPGD/VBhfEt13c2kvVdgRU2iZugo1b25fo4rprBtB3+MQTs6x35yUmfw5GXK4w
APzhihAV9h2m9c8JnJsZqLSPhVfrDQzhSgKPpH5HI6vXEMp76chmwacDyjI54yz5
/oKa77bO5kCAIvR/y/bNg7Qnv9YRHKZt/wAJ6uGhOMakwZkq+waAajYag4Vrwbsl
CERqk7jzhNSIKKkjrt4uskzBpMH5Fhu0jVWgNXc0YCkl+pOMXasU5plxSTsFKv2P
vLQQoZ3s/wC+slB84RnQu/8ACpPGW7w2YdUtR2VXndec35ubjxoLrWu8eFpw7Yxn
tH845Dxh15evFPxlu13mN13oWD3jJ6pWpNL+9f6xUVda7f73fdzWtIW+Eyc5bvP/
2YkCNwQTAQgAIQUCV8JROAIbAwULCQgHAgYVCAkKCwIEFgIDAQIeAQIXgAAKCRCz
H84oG/SfS0elD/4msMCYQqW0/s8wMTyTx99A2bxZ9Vx4cKD+cGZRTLFlosrtWVsP
HRQi2lwLbHa9PR63MywNkqT7S5dXgEdBmAe/bXAchG6KbnLyrftspMso3lppKADa
ziWRkjyqCrpNvw/Z+vlsxmB5KXlzuSApgP+orDv3lb0JvNACS+31RuhgXxW04dJG
9Tm5o59RzUJGXchvcL+KmLgMQPL4zBMSVRL90cO+Dr/AZa12aF7O/fWE78Lq83tl
0hoIzFHmCJ2F8bvRxY4FqkQeqFZmqJ0OVYN9oFVTAxg708+z6ql6Pmzzg9qtNx9L
BbbQkhyG8IXFJ3+2P6j7SFcKTRF+uDIsSuexm46eqy7k5f9u+yqmuLFyq3wVrmi6
DDzhBdbPG61MgkWvEfJJTXHXswtTjuW+5GklVtpkFDPm4Xa5/9y/AwsPpKCLNW47
p1KPZMAlCnaIj9N0ocVMFasRhjk1scUc6q7w+OUslbKyA2wa4wfQcy0xTssmD0oT
tuJ93ghJsYNi8HrYg6jdUUSfETm7aJyHtOSr4QjyIRPjFGvqR2El79o5woVas/v4
qKHEiQj4h+tBixrtUHDMgvs+8N7KV/chl7QljNR4ro8OMebGYdYzejpJs9gXjZJg
QPC5i2wsm4aJ+OSrw/S1pPWcNvYSJZqd4wx7MYoV5ImUY1khwNglaMsnULkCDQRX
tdN8ARAAtJXQrglQgptO3aLR3UMIUbf7HjhvU6c4EW20/YJ0uV1djw5noIaMvoqo
J3j+Ld9kZBYOr/ZmMDSkciPIR4PUQkyIjegjNv1OwCgroFWyqBaXgQtgowvS9959
Ct/kCk9n+fPfxgJ1p9jLRooNQW5Vj1a0u0PAm33Wl/fg5Fkoo+LlvqIQV9aO1I5u
76to4DMVxZ6wj3dRC3y/aDKzKFJ0kqF7GENZSyo4zUbp9WowPVOMhk3HlHCAOr/y
lW6K3OrKjDcpZ5uGk7dJI4G6vsWc+uaHtgADWDa3kzVxE9cUTqf6+2ta7RTTGYaO
9nPiiXqIRzQrertMTz/ZCavQ7nP1PrJWHxQGFzBmwGwYzf0sBir/HDY3puUwbs8B
tKAzQULm1jufJQUt8dkRzlp2a41+sfovLX86bFh15LG/QAO6ui+K5qZS21ivP4Gu
52zetEL5+hv5Z1s/wi9jcAcqnuQNMxbMJHNG2Opi1g79DHMVPpSinn1Uv84K7fXQ
ejLKnoiih1QTChv6DMu8R1kLm999mkkVIrRE2iAtuvhS47GxEaJlDKi202xZeIpk
ikLWbApA4IRNI0tK4usVn+/E0xa7lDDReH/EokPoDGP7zE6gXPnEECQ0SnI+Hjm1
LMcBonB9WsdtJKIFAbLNYEtXs9cAWXqZXlgv70DKydXuFV/Qb+UAEQEAAYkCHwQY
AQgACQUCV7XTfAIbDAAKCRCzH84oG/SfS71RD/9fnMXBpop/kEP8EF+LyVi/1Ff4
2spVEg3+9HK6InyvkhMWcX8p4PL6niIKixNXutNsvmXXOVwI9N0U9jDnT480wbKb
9i0S2Oom9OR8zFMG0yix5bBChOPCQC/j5yDxiglHC86xsywj9w0H3AXQ/eTqWVpB
R8V01QeyM6MMC/GmxEOqXwwyMrHNf1jtknZ/ACjbYT1NT34u/BkC2qu0gv9GSpqw
FWSK38xc8nzfOif/X2NQTBTsxSRmLmrRd73nAjhwUnhXmJEWa5ZozSewPNM5qQ/Y
Yq708J+aGF95Y8dJ7+lsr2yN4Y6QY1Ff4bnHEaMyAFLEvilE+h7miWeBYEgKpZ/c
FKpzmOXQIlLTO0i3VXFZ8KG1L9qBxUiKk1l9oH9UNr9AOOWJ2LGzIo29y/zBE+fn
q/QiAcUTlX0LyRsf6U5U72VOdFEIJW5z2MebvB34Iap+i2O9X6rmcQ8+5fXRcFDI
t6Jf9thSGG0W8wGYWXWpOk6ex0E19TP97Bj9nqXqfORgTp4JoRZxLp4cM/rV6Mos
lmWXGpY2JZBSGeFkaxOu3FulcXU0mOhooCRi8NQaVkuO9+tM0tg/cjC2A2hyf+++
3mjIk99nZycN5FzL1n14GB1Z2YprxhJpe6B/ROiFCZeWnlBwBxmRAK9naQ1X87Lo
UVZrEnQUQdQwuXGkcA==
=Jhl8
-----END PGP PUBLIC KEY BLOCK-----
'''


class ValidatePublicKeyTestCase(SimpleTestCase):
    def test_valid_key(self):
        fields.validate_public_key(VALID_KEY)

    def test_invalid_key(self):
        with self.assertRaises(fields.ValidationError):
            fields.validate_public_key('not a real key stupid')


class GpgTestCase(SimpleTestCase):
    def test_import_key(self):
        with gpg.client(import_keys=[VALID_KEY]) as g:
            self.assertEqual(len(g.list_keys()), 1)

    def test_encrypt(self):
        actual = gpg.encrypt('HOOCHIEMAMA', recipient_keys=[VALID_KEY])
        self.assertIn('-----BEGIN PGP MESSAGE-----', actual)
        self.assertIn('-----END PGP MESSAGE-----', actual)
